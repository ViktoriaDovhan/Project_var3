.model small
.stack 100h

.data
    buffer db 80h dup(?) ; Оголошення буфера для зберігання даних

.code
main proc
    mov ax, @data  ; Завантаження адреси сегмента даних
    mov ds, ax     ; Установка DS для доступу до даних

    mov ah, 3Fh    ; Функція DOS для читання з файлу
    mov bx, 0      ; Handle stdin (стандартний ввід)
    lea dx, buffer ; Вказівник на буфер, куди будуть зчитуватися дані
    mov cx, 80h    ; Читати 128 байтів (максимальна довжина рядка у DOS)
    int 21h        ; Виклик DOS-інтерапту для зчитування з файлу

    cmp ax, cx     ; Порівняння кількості зчитаних байтів з максимальною довжиною рядка
    jae check_eof  ; Якщо прочитано стільки ж байтів або більше, перевіряємо на кінець файлу
    mov cx, ax     ; Якщо прочитано менше, корегуємо CX для виведення

display:
    mov ah, 02h    ; Функція DOS для виведення символу
    mov si, 0      ; Встановлення SI на початок буфера

print_loop:
    mov dl, buffer[si] ; Завантаження символу для виведення
    int 21h            ; Вивід символу
    inc si             ; Перехід до наступного символу
    loop print_loop    ; Повторюємо, поки CX не дорівнює 0

check_eof:
    ; Перевірка на кінець файлу
    mov ah, 3Eh   ; Функція DOS для перевірки EOF
    mov bx, 0     ; Handle stdin (стандартний ввід)
    int 21h       ; Виклик DOS-інтерапту для перевірки EOF

    ; Якщо вказівник EOF не дорівнює 128 (0x80), це означає, що файл закінчився
    cmp ax, 80h
    jne end_program  ; Якщо досягнуто кінець файлу, завершуємо програму

    ; Якщо не досягнуто кінець файлу, читаємо далі
    jmp main

end_program:
    ; Завершення програми і повернення до DOS
    mov ax, 4C00h
    int 21h

main endp
end main
